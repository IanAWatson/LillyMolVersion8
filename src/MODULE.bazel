module(
    name = "lillymol",
    version = "1.2.0",
)

# Periodically check the bazel central registry for new versions.
# https://github.com/bazelbuild/bazel-central-registry/tree/main/modules

new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")

#http_file = use_repo_rule(
#    "@bazel_tools//tools/build_defs/repo:http.bzl", "http_file"
#)
#http_archive = use_repo_rule(
#    "@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive"
#)


bazel_dep(name = "abseil-cpp", version = "20250512.1", repo_name="com_google_absl")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "caseyduquettesc_rules_python_pytest", version = "1.1.1", repo_name = "rules_python_pytest")
bazel_dep(name = "eigen", version = "3.4.0.bcr.3", repo_name="com_gitlab_libeigen_eigen")
bazel_dep(name = "gazelle", version = "0.44.0")
bazel_dep(name = "highwayhash", version = "0.0.0-20240305-5ad3bf8")

# Does not work inside Lilly, link error half way through the build.
#bazel_dep(name = "libzmq", version = "4.3.5")
# Not being used.
#bazel_dep(name = "fast_float", version = "6.1.6")

bazel_dep(name = "google_benchmark", version = "1.9.4", repo_name="benchmark")
bazel_dep(name = "googletest", version = "1.17.0")
bazel_dep(name = "nanobind_bazel", version = "2.7.0")
bazel_dep(name = "onetbb", version = "2022.1.0", repo_name="onetbb")
bazel_dep(name = "platforms", version = "1.0.0")
# Version 27.0 works for c++, but does not work with python 3.11
bazel_dep(name = "protobuf", version = "31.1", repo_name="com_google_protobuf")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
# bazel_dep(name = "pybind11_protobuf", version = "2.11.1.bzl.3")
bazel_dep(name = "re2", version = "2024-07-02")
bazel_dep(name = "rules_cc", version = "0.1.4")
bazel_dep(name = "rules_go", version = "0.55.1")
# bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")

bazel_dep(name = "rules_pkg", version = "1.1.0")

bazel_dep(name = "rules_proto", version = "7.1.0")
# bazel_dep(name = "rules_proto_grpc_go", version = "5.0.1")
# Beware, adding this version will cause a bump in the
# protoc version to an incompatible version.
bazel_dep(name = "rules_python", version = "1.4.1")

# bazel_dep(name = "rules_proto_grpc", version = "5.0.0")
# bazel_dep(name = "rules_proto_grpc_cpp", version = "5.0.0")

bazel_dep(name = "rules_ruby", version = "0.17.2")
bazel_dep(name = "tomlplusplus", version = "3.4.0")
bazel_dep(name = "zlib", version = "1.3.1")

# Local repositories

bazel_dep(name = "data", version = "1.0.0")
local_path_override(
    module_name = "data",
    path = "../data"
)

bazel_dep(name = "third_party", version = "1.0.0")
local_path_override(
    module_name = "third_party",
    path = "../third_party"
)

# Vendor provided tools.

new_local_repository(
    name = "corina",
    path = "/lrlhps/apps/gc3tk/c3tk-core/lib/corina",
#   path = "/lrlhps/apps/corina/corina-5.0.0",
    build_file_content = """
cc_library(
    name = "corina",
    srcs = [
#      "lib/corina.so",
       "lib/libcorina_linux_rhel6_x86_64_libc2.12_gcc4.4.7.so",
    ],
    hdrs = ["include/corina_lib.h"],
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
""",
)

# Note that this includes a libf2c that might be different from @local_f2c.
# definitely possibility of problems...
new_local_repository(
    name = "biobyte",
    path= "/lrlhps/apps/gc3tk/c3tk-core/lib/biobyte/linux-64/",
    build_file_content = """
cc_library (
    name = "biobyte",
    srcs = [ "lib/libBB.a", "lib/libf2c.a" ],
    hdrs = glob(["h/*.h"]),
    strip_include_prefix = "h",
    visibility = ["//visibility:public"],
)
"""
)
# in order to build LillyMol pybind11 bindings you will need a python
# installation with pybind installed with that. Adjust this to meet
# local needs.
new_local_repository(
    name = "python",
    path = "/usr/include/python3.12",
    build_file_content = """
cc_library(
    name = "python",
    hdrs = glob(
            ["**/*.h"]
    ),
    includes = [
        ".",
    ],
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository(
  name = "nlopt",
  path = "/lrlhps/users/rx87690/third_party",
  build_file_content = """
cc_library(
  name = "nlopt",
  hdrs = [
    "include/nlopt.hpp",
    "include/nlopt.h",
  ],
  strip_include_prefix = "include",
  srcs = [
    "lib64/libnlopt.a",
  ],
    visibility = ["//visibility:public"],
)
"""
)
